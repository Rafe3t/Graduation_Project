
#include "main.h"
#include "_delay.h"
#include "DC_motor.h"

#define IR_LEFT_PIN GPIO_PIN_11
#define IR_RIGHT_PIN GPIO_PIN_12
#define IR_GPIO_PORT GPIOA

static void MX_GPIO_Init(void);
void SystemClock_Config(void);
static void MX_USART1_UART_Init(void);
void stopReceivingData(void) ;
UART_HandleTypeDef huart1;

uint8_t rx_data='0';
static uint8_t data_received = 0;

static volatile  uint8_t speed = 100;

int main(void)
{

	HAL_Init();


	SystemClock_Config();

	MX_GPIO_Init();
	MX_USART1_UART_Init();
	DcMotor_Init();

	_delay_ms(1000);



	//HAL_UART_Receive_IT(&huart1, &rx_data, 1);

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);



	while (1)
	{
		// Read IR sensor states

		uint32_t ir_left_state = HAL_GPIO_ReadPin(IR_GPIO_PORT, IR_LEFT_PIN);
		uint32_t ir_right_state = HAL_GPIO_ReadPin(IR_GPIO_PORT, IR_RIGHT_PIN);
		// Control motor based on sensor readings
		if (ir_left_state == GPIO_PIN_RESET && ir_right_state == GPIO_PIN_RESET)
		{
			// Both sensors detect the line, move forward
			DcMotor_Move_MainDirection(stop, 0);

		}
		/*else if (ir_left_state == GPIO_PIN_RESET)
		{
			// Left sensor detects the line, turn left
			DcMotor_Move_MainDirection(backword, 40);
		}*/
		else if (ir_right_state == GPIO_PIN_RESET)
		{
			// Right sensor detects the line, turn right
			DcMotor_Move_MainDirection(backword, 40);
		}
		else
		{
			// No sensor detects the line, stop
			DcMotor_Move_MainDirection(forward, 70);
		}

		// Add a delay to prevent rapid switching between motor states
		_delay_ms(100);
	}


}





void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
	{
		Error_Handler();
	}
}

static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();

	/*Configure GPIO pin Output Level */


	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA11 PA12 */
	GPIO_InitStruct.Pin = IR_LEFT_PIN | IR_RIGHT_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(IR_GPIO_PORT, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

static void MX_USART1_UART_Init(void)
{

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 9600;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart1) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==USART1)
	{
		if(rx_data== 'f')
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

			DcMotor_Move_MainDirection(forward, speed);

		}
		else if(rx_data== 'b')
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
			DcMotor_Move_MainDirection(backword, speed);

		}
		else if(rx_data== 'r')
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
			DcMotor_Move_MainDirection(right, speed);

		}
		else if(rx_data== 'l')
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
			DcMotor_Move_MainDirection(left, speed);

		}
		else if (rx_data== 's')
		{
			DcMotor_Move_MainDirection(stop, 0);

		}
		else if (rx_data== '1')
		{
			DcMotor_Move_MainDirection(stop, 0);
			speed= 50;

		}
		else if (rx_data== '2')
		{
			DcMotor_Move_MainDirection(stop, 0);
			speed= 75 ;

		}
		else if (rx_data== '3')
		{
			DcMotor_Move_MainDirection(stop, 0);
			speed= 100;

		}
		else
		{
			//do nothing
		}
		data_received = 1;

		HAL_UART_Receive_IT(&huart1,&rx_data,1);

	}

	//HAL_Delay(1000);
}



/*void stopReceivingData()
{
	// If no data has been received, stop the motor
	if (!data_received) {
		DcMotor_Move_MainDirection(stop, 0);
	}

	// Reset the flag
	data_received = 0;
}
 */

void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */



