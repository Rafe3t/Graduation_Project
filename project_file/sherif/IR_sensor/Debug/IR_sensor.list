
IR_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000558  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e8  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000106e8  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000214f  00000000  00000000  00010718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000896  00000000  00000000  00012867  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000338  00000000  00000000  00013100  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00013438  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000138a  00000000  00000000  000136f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000da5  00000000  00000000  00014a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015827  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000bdc  00000000  00000000  000158a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006c8 	.word	0x080006c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080006c8 	.word	0x080006c8

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	2301      	movs	r3, #1
 8000278:	408b      	lsls	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	b292      	uxth	r2, r2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	b292      	uxth	r2, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	887b      	ldrh	r3, [r7, #2]
 80002fa:	4013      	ands	r3, r2
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	887a      	ldrh	r2, [r7, #2]
 8000328:	831a      	strh	r2, [r3, #24]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	460b      	mov	r3, r1
 8000340:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	887a      	ldrh	r2, [r7, #2]
 8000346:	835a      	strh	r2, [r3, #26]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d006      	beq.n	8000374 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000366:	490a      	ldr	r1, [pc, #40]	; (8000390 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <RCC_AHB1PeriphClockCmd+0x3c>)
 800036a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4313      	orrs	r3, r2
 8000370:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000372:	e006      	b.n	8000382 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000374:	4906      	ldr	r1, [pc, #24]	; (8000390 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	43db      	mvns	r3, r3
 800037e:	4013      	ands	r3, r2
 8000380:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800

08000394 <IR_Sensor_Init>:
 */

#include "IR_sensor.h"

void IR_Sensor_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable the GPIO clock
    RCC_AHB1PeriphClockCmd(IR_SENSOR_RCC, ENABLE);
 800039a:	2101      	movs	r1, #1
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ffd9 	bl	8000354 <RCC_AHB1PeriphClockCmd>

    // Configure the GPIO pin as input
    GPIO_InitStructure.GPIO_Pin = IR_SENSOR_PIN;
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80003a6:	2300      	movs	r3, #0
 80003a8:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003aa:	2302      	movs	r3, #2
 80003ac:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	71fb      	strb	r3, [r7, #7]

    GPIO_Init(IR_SENSOR_PORT, &GPIO_InitStructure);
 80003b2:	463b      	mov	r3, r7
 80003b4:	4619      	mov	r1, r3
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <IR_Sensor_Init+0x30>)
 80003b8:	f7ff ff06 	bl	80001c8 <GPIO_Init>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40020000 	.word	0x40020000

080003c8 <IR_Sensor_Read>:

uint8_t IR_Sensor_Read(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    // Read the digital signal from the IR sensor
    return GPIO_ReadInputDataBit(IR_SENSOR_PORT, IR_SENSOR_PIN);
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	4803      	ldr	r0, [pc, #12]	; (80003dc <IR_Sensor_Read+0x14>)
 80003d0:	f7ff ff88 	bl	80002e4 <GPIO_ReadInputDataBit>
 80003d4:	4603      	mov	r3, r0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40020000 	.word	0x40020000

080003e0 <LED_Init>:

#include "led.h"

void LED_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable the GPIO clock
    RCC_AHB1PeriphClockCmd(LED_RCC, ENABLE);
 80003e6:	2101      	movs	r1, #1
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff ffb3 	bl	8000354 <RCC_AHB1PeriphClockCmd>

    // Configure the GPIO pin as output
    GPIO_InitStructure.GPIO_Pin = LED_PIN;
 80003ee:	2320      	movs	r3, #32
 80003f0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003f2:	2301      	movs	r3, #1
 80003f4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003f6:	2302      	movs	r3, #2
 80003f8:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80003fa:	2300      	movs	r3, #0
 80003fc:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8000402:	463b      	mov	r3, r7
 8000404:	4619      	mov	r1, r3
 8000406:	4803      	ldr	r0, [pc, #12]	; (8000414 <LED_Init+0x34>)
 8000408:	f7ff fede 	bl	80001c8 <GPIO_Init>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40020000 	.word	0x40020000

08000418 <LED_On>:


void LED_On(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    // Turn on the LED
    GPIO_SetBits(LED_PORT, LED_PIN);
 800041c:	2120      	movs	r1, #32
 800041e:	4802      	ldr	r0, [pc, #8]	; (8000428 <LED_On+0x10>)
 8000420:	f7ff ff7a 	bl	8000318 <GPIO_SetBits>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40020000 	.word	0x40020000

0800042c <LED_Off>:

void LED_Off(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    // Turn off the LED
    GPIO_ResetBits(LED_PORT, LED_PIN);
 8000430:	2120      	movs	r1, #32
 8000432:	4802      	ldr	r0, [pc, #8]	; (800043c <LED_Off+0x10>)
 8000434:	f7ff ff7f 	bl	8000336 <GPIO_ResetBits>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40020000 	.word	0x40020000

08000440 <main>:
#include "IR_sensor.h"

#include "led.h"

int main(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0

	SystemInit();
 8000446:	f000 f869 	bl	800051c <SystemInit>

	LED_Init();
 800044a:	f7ff ffc9 	bl	80003e0 <LED_Init>
	IR_Sensor_Init();
 800044e:	f7ff ffa1 	bl	8000394 <IR_Sensor_Init>
	uint8_t sensorValue;
	while (1)
	{
		// Read the value from the IR sensor
		sensorValue = IR_Sensor_Read();
 8000452:	f7ff ffb9 	bl	80003c8 <IR_Sensor_Read>
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]


		if (sensorValue == SET)
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d102      	bne.n	8000466 <main+0x26>
		{
			// IR sensor detected an object
			LED_On();
 8000460:	f7ff ffda 	bl	8000418 <LED_On>
 8000464:	e7f5      	b.n	8000452 <main+0x12>
		}
		else
		{
			// No object detected
			LED_Off();
 8000466:	f7ff ffe1 	bl	800042c <LED_Off>
		sensorValue = IR_Sensor_Read();
 800046a:	e7f2      	b.n	8000452 <main+0x12>

0800046c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800046c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000472:	e003      	b.n	800047c <LoopCopyDataInit>

08000474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800047a:	3104      	adds	r1, #4

0800047c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000484:	d3f6      	bcc.n	8000474 <CopyDataInit>
  ldr  r2, =_sbss
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000488:	e002      	b.n	8000490 <LoopFillZerobss>

0800048a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800048a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800048c:	f842 3b04 	str.w	r3, [r2], #4

08000490 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000494:	d3f9      	bcc.n	800048a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000496:	f000 f841 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800049a:	f000 f8f1 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049e:	f7ff ffcf 	bl	8000440 <main>
  bx  lr    
 80004a2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004a8:	080006e8 	.word	0x080006e8
  ldr  r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004b0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80004b4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80004b8:	2000001c 	.word	0x2000001c

080004bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>

080004be <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <HardFault_Handler+0x4>

080004d2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <BusFault_Handler+0x4>

080004de <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <UsageFault_Handler+0x4>

080004e4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <SystemInit+0x60>)
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <SystemInit+0x60>)
 8000524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800052c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <SystemInit+0x64>)
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <SystemInit+0x64>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <SystemInit+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000542:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <SystemInit+0x64>)
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <SystemInit+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800054c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000550:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <SystemInit+0x64>)
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <SystemInit+0x68>)
 8000556:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <SystemInit+0x64>)
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <SystemInit+0x64>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <SystemInit+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800056a:	f000 f80d 	bl	8000588 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800056e:	4b03      	ldr	r3, [pc, #12]	; (800057c <SystemInit+0x60>)
 8000570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000574:	609a      	str	r2, [r3, #8]
#endif
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00
 8000580:	40023800 	.word	0x40023800
 8000584:	24003010 	.word	0x24003010

08000588 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000596:	4a36      	ldr	r2, [pc, #216]	; (8000670 <SetSysClock+0xe8>)
 8000598:	4b35      	ldr	r3, [pc, #212]	; (8000670 <SetSysClock+0xe8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <SetSysClock+0xe8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005aa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <SetSysClock+0x38>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005be:	d1f0      	bne.n	80005a2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <SetSysClock+0xe8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005cc:	2301      	movs	r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	e001      	b.n	80005d6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d142      	bne.n	8000662 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005dc:	4a24      	ldr	r2, [pc, #144]	; (8000670 <SetSysClock+0xe8>)
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SetSysClock+0xe8>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <SetSysClock+0xec>)
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SetSysClock+0xec>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <SetSysClock+0xe8>)
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <SetSysClock+0xe8>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005fc:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <SetSysClock+0xe8>)
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <SetSysClock+0xe8>)
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <SetSysClock+0xe8>)
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <SetSysClock+0xe8>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000612:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <SetSysClock+0xe8>)
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <SetSysClock+0xf0>)
 8000618:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <SetSysClock+0xe8>)
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <SetSysClock+0xe8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000624:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000626:	bf00      	nop
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <SetSysClock+0xe8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0f9      	beq.n	8000628 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <SetSysClock+0xf4>)
 8000636:	f240 7205 	movw	r2, #1797	; 0x705
 800063a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <SetSysClock+0xe8>)
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <SetSysClock+0xe8>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f023 0303 	bic.w	r3, r3, #3
 8000646:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <SetSysClock+0xe8>)
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <SetSysClock+0xe8>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000654:	bf00      	nop
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <SetSysClock+0xe8>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f003 030c 	and.w	r3, r3, #12
 800065e:	2b08      	cmp	r3, #8
 8000660:	d1f9      	bne.n	8000656 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000
 8000678:	07405419 	.word	0x07405419
 800067c:	40023c00 	.word	0x40023c00

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4e0d      	ldr	r6, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1ba4      	subs	r4, r4, r6
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2500      	movs	r5, #0
 800068c:	42a5      	cmp	r5, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4e0b      	ldr	r6, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 f818 	bl	80006c8 <_init>
 8000698:	1ba4      	subs	r4, r4, r6
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2500      	movs	r5, #0
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a8:	4798      	blx	r3
 80006aa:	3501      	adds	r5, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b2:	4798      	blx	r3
 80006b4:	3501      	adds	r5, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080006e0 	.word	0x080006e0
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006e0 	.word	0x080006e0
 80006c4:	080006e4 	.word	0x080006e4

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr
