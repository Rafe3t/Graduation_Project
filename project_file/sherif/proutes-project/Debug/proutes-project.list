
proutes-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000fdc  08000fdc  00010fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000fe8  08000fe8  00010fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010fec  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010fec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000042a3  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a96  00000000  00000000  000152bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000678  00000000  00000000  00015d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f0  00000000  00000000  000163d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001f4c  00000000  00000000  000169c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001a9d  00000000  00000000  0001890c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001a3a9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b78  00000000  00000000  0001a428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fc4 	.word	0x08000fc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000fc4 	.word	0x08000fc4

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	2301      	movs	r3, #1
 8000278:	408b      	lsls	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	b292      	uxth	r2, r2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	b292      	uxth	r2, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
 80002f0:	4613      	mov	r3, r2
 80002f2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002fc:	787a      	ldrb	r2, [r7, #1]
 80002fe:	887b      	ldrh	r3, [r7, #2]
 8000300:	f003 0307 	and.w	r3, r3, #7
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
 800030a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800030c:	887b      	ldrh	r3, [r7, #2]
 800030e:	08db      	lsrs	r3, r3, #3
 8000310:	b29b      	uxth	r3, r3
 8000312:	4618      	mov	r0, r3
 8000314:	887b      	ldrh	r3, [r7, #2]
 8000316:	08db      	lsrs	r3, r3, #3
 8000318:	b29b      	uxth	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3208      	adds	r2, #8
 8000320:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	f003 0307 	and.w	r3, r3, #7
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	210f      	movs	r1, #15
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	43db      	mvns	r3, r3
 8000334:	ea02 0103 	and.w	r1, r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f100 0208 	add.w	r2, r0, #8
 800033e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000342:	887b      	ldrh	r3, [r7, #2]
 8000344:	08db      	lsrs	r3, r3, #3
 8000346:	b29b      	uxth	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3208      	adds	r2, #8
 800034e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4313      	orrs	r3, r2
 8000356:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000358:	887b      	ldrh	r3, [r7, #2]
 800035a:	08db      	lsrs	r3, r3, #3
 800035c:	b29b      	uxth	r3, r3
 800035e:	461a      	mov	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3208      	adds	r2, #8
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000384:	78fb      	ldrb	r3, [r7, #3]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d006      	beq.n	8000398 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800038a:	490a      	ldr	r1, [pc, #40]	; (80003b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800038e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4313      	orrs	r3, r2
 8000394:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000396:	e006      	b.n	80003a6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800039c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4013      	ands	r3, r2
 80003a4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40023800 	.word	0x40023800

080003b8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d006      	beq.n	80003d8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80003ca:	490a      	ldr	r1, [pc, #40]	; (80003f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80003ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4313      	orrs	r3, r2
 80003d4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80003d6:	e006      	b.n	80003e6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80003d8:	4906      	ldr	r1, [pc, #24]	; (80003f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80003dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	43db      	mvns	r3, r3
 80003e2:	4013      	ands	r3, r2
 80003e4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800

080003f8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <TIM_TimeBaseInit+0xbc>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d013      	beq.n	800043c <TIM_TimeBaseInit+0x44>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a28      	ldr	r2, [pc, #160]	; (80004b8 <TIM_TimeBaseInit+0xc0>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d00f      	beq.n	800043c <TIM_TimeBaseInit+0x44>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000422:	d00b      	beq.n	800043c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a25      	ldr	r2, [pc, #148]	; (80004bc <TIM_TimeBaseInit+0xc4>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d007      	beq.n	800043c <TIM_TimeBaseInit+0x44>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <TIM_TimeBaseInit+0xc8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d003      	beq.n	800043c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <TIM_TimeBaseInit+0xcc>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d108      	bne.n	800044e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800043c:	89fb      	ldrh	r3, [r7, #14]
 800043e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000442:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	885a      	ldrh	r2, [r3, #2]
 8000448:	89fb      	ldrh	r3, [r7, #14]
 800044a:	4313      	orrs	r3, r2
 800044c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <TIM_TimeBaseInit+0xd0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d00c      	beq.n	8000470 <TIM_TimeBaseInit+0x78>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <TIM_TimeBaseInit+0xd4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d008      	beq.n	8000470 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000464:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	891a      	ldrh	r2, [r3, #8]
 800046a:	89fb      	ldrh	r3, [r7, #14]
 800046c:	4313      	orrs	r3, r2
 800046e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	89fa      	ldrh	r2, [r7, #14]
 8000474:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	881a      	ldrh	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <TIM_TimeBaseInit+0xbc>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d003      	beq.n	8000496 <TIM_TimeBaseInit+0x9e>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <TIM_TimeBaseInit+0xc0>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d104      	bne.n	80004a0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	7a9b      	ldrb	r3, [r3, #10]
 800049a:	b29a      	uxth	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	829a      	strh	r2, [r3, #20]
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40010000 	.word	0x40010000
 80004b8:	40010400 	.word	0x40010400
 80004bc:	40000400 	.word	0x40000400
 80004c0:	40000800 	.word	0x40000800
 80004c4:	40000c00 	.word	0x40000c00
 80004c8:	40001000 	.word	0x40001000
 80004cc:	40001400 	.word	0x40001400

080004d0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d008      	beq.n	80004f4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80004f2:	e007      	b.n	8000504 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	b29a      	uxth	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	801a      	strh	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	817b      	strh	r3, [r7, #10]
 800051e:	2300      	movs	r3, #0
 8000520:	81fb      	strh	r3, [r7, #14]
 8000522:	2300      	movs	r3, #0
 8000524:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	8c1b      	ldrh	r3, [r3, #32]
 800052a:	b29b      	uxth	r3, r3
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	b29a      	uxth	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	8c1b      	ldrh	r3, [r3, #32]
 800053a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	889b      	ldrh	r3, [r3, #4]
 8000540:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	8b1b      	ldrh	r3, [r3, #24]
 8000546:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8000548:	897b      	ldrh	r3, [r7, #10]
 800054a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800054e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	f023 0303 	bic.w	r3, r3, #3
 8000556:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	4313      	orrs	r3, r2
 8000560:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	f023 0302 	bic.w	r3, r3, #2
 8000568:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	899a      	ldrh	r2, [r3, #12]
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	4313      	orrs	r3, r2
 8000572:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	885a      	ldrh	r2, [r3, #2]
 8000578:	89fb      	ldrh	r3, [r7, #14]
 800057a:	4313      	orrs	r3, r2
 800057c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <TIM_OC1Init+0xec>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d003      	beq.n	800058e <TIM_OC1Init+0x7e>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <TIM_OC1Init+0xf0>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d123      	bne.n	80005d6 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800058e:	89fb      	ldrh	r3, [r7, #14]
 8000590:	f023 0308 	bic.w	r3, r3, #8
 8000594:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	89da      	ldrh	r2, [r3, #14]
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	4313      	orrs	r3, r2
 800059e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80005a0:	89fb      	ldrh	r3, [r7, #14]
 80005a2:	f023 0304 	bic.w	r3, r3, #4
 80005a6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	889a      	ldrh	r2, [r3, #4]
 80005ac:	89fb      	ldrh	r3, [r7, #14]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80005b2:	89bb      	ldrh	r3, [r7, #12]
 80005b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80005ba:	89bb      	ldrh	r3, [r7, #12]
 80005bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005c0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	8a1a      	ldrh	r2, [r3, #16]
 80005c6:	89bb      	ldrh	r3, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	8a5a      	ldrh	r2, [r3, #18]
 80005d0:	89bb      	ldrh	r3, [r7, #12]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	89ba      	ldrh	r2, [r7, #12]
 80005da:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	897a      	ldrh	r2, [r7, #10]
 80005e0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	89fa      	ldrh	r2, [r7, #14]
 80005ee:	841a      	strh	r2, [r3, #32]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40010000 	.word	0x40010000
 8000600:	40010400 	.word	0x40010400

08000604 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	817b      	strh	r3, [r7, #10]
 8000612:	2300      	movs	r3, #0
 8000614:	81fb      	strh	r3, [r7, #14]
 8000616:	2300      	movs	r3, #0
 8000618:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	8c1b      	ldrh	r3, [r3, #32]
 800061e:	b29b      	uxth	r3, r3
 8000620:	f023 0310 	bic.w	r3, r3, #16
 8000624:	b29a      	uxth	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	8c1b      	ldrh	r3, [r3, #32]
 800062e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8b1b      	ldrh	r3, [r3, #24]
 800063a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800063c:	897b      	ldrh	r3, [r7, #10]
 800063e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000642:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8000644:	897b      	ldrh	r3, [r7, #10]
 8000646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800064a:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b29a      	uxth	r2, r3
 8000654:	897b      	ldrh	r3, [r7, #10]
 8000656:	4313      	orrs	r3, r2
 8000658:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800065a:	89fb      	ldrh	r3, [r7, #14]
 800065c:	f023 0320 	bic.w	r3, r3, #32
 8000660:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	899b      	ldrh	r3, [r3, #12]
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	b29a      	uxth	r2, r3
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	4313      	orrs	r3, r2
 800066e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	885b      	ldrh	r3, [r3, #2]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	b29a      	uxth	r2, r3
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	4313      	orrs	r3, r2
 800067c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a22      	ldr	r2, [pc, #136]	; (800070c <TIM_OC2Init+0x108>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d003      	beq.n	800068e <TIM_OC2Init+0x8a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <TIM_OC2Init+0x10c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d12b      	bne.n	80006e6 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000694:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	89db      	ldrh	r3, [r3, #14]
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	b29a      	uxth	r2, r3
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006aa:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	89fb      	ldrh	r3, [r7, #14]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80006ba:	89bb      	ldrh	r3, [r7, #12]
 80006bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006c0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80006c2:	89bb      	ldrh	r3, [r7, #12]
 80006c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006c8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	8a1b      	ldrh	r3, [r3, #16]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	89bb      	ldrh	r3, [r7, #12]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	8a5b      	ldrh	r3, [r3, #18]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	b29a      	uxth	r2, r3
 80006e0:	89bb      	ldrh	r3, [r7, #12]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	89ba      	ldrh	r2, [r7, #12]
 80006ea:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	897a      	ldrh	r2, [r7, #10]
 80006f0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	89fa      	ldrh	r2, [r7, #14]
 80006fe:	841a      	strh	r2, [r3, #32]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40010000 	.word	0x40010000
 8000710:	40010400 	.word	0x40010400

08000714 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	817b      	strh	r3, [r7, #10]
 8000722:	2300      	movs	r3, #0
 8000724:	81fb      	strh	r3, [r7, #14]
 8000726:	2300      	movs	r3, #0
 8000728:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8c1b      	ldrh	r3, [r3, #32]
 800072e:	b29b      	uxth	r3, r3
 8000730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000734:	b29a      	uxth	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	8c1b      	ldrh	r3, [r3, #32]
 800073e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	889b      	ldrh	r3, [r3, #4]
 8000744:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8b9b      	ldrh	r3, [r3, #28]
 800074a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800074c:	897b      	ldrh	r3, [r7, #10]
 800074e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000752:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000754:	897b      	ldrh	r3, [r7, #10]
 8000756:	f023 0303 	bic.w	r3, r3, #3
 800075a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	897b      	ldrh	r3, [r7, #10]
 8000762:	4313      	orrs	r3, r2
 8000764:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800076c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	b29a      	uxth	r2, r3
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	4313      	orrs	r3, r2
 800077a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	b29a      	uxth	r2, r3
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	4313      	orrs	r3, r2
 8000788:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <TIM_OC3Init+0x104>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d003      	beq.n	800079a <TIM_OC3Init+0x86>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <TIM_OC3Init+0x108>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d12b      	bne.n	80007f2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007a0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	89db      	ldrh	r3, [r3, #14]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	89fb      	ldrh	r3, [r7, #14]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007b6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	b29a      	uxth	r2, r3
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80007c6:	89bb      	ldrh	r3, [r7, #12]
 80007c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007cc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80007ce:	89bb      	ldrh	r3, [r7, #12]
 80007d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007d4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	8a1b      	ldrh	r3, [r3, #16]
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	b29a      	uxth	r2, r3
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	8a5b      	ldrh	r3, [r3, #18]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	89bb      	ldrh	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	89ba      	ldrh	r2, [r7, #12]
 80007f6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	897a      	ldrh	r2, [r7, #10]
 80007fc:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	841a      	strh	r2, [r3, #32]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40010000 	.word	0x40010000
 800081c:	40010400 	.word	0x40010400

08000820 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	81bb      	strh	r3, [r7, #12]
 800082e:	2300      	movs	r3, #0
 8000830:	817b      	strh	r3, [r7, #10]
 8000832:	2300      	movs	r3, #0
 8000834:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	8c1b      	ldrh	r3, [r3, #32]
 800083a:	b29b      	uxth	r3, r3
 800083c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000840:	b29a      	uxth	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	8c1b      	ldrh	r3, [r3, #32]
 800084a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	889b      	ldrh	r3, [r3, #4]
 8000850:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	8b9b      	ldrh	r3, [r3, #28]
 8000856:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000858:	89bb      	ldrh	r3, [r7, #12]
 800085a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800085e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000866:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b29a      	uxth	r2, r3
 8000870:	89bb      	ldrh	r3, [r7, #12]
 8000872:	4313      	orrs	r3, r2
 8000874:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000876:	897b      	ldrh	r3, [r7, #10]
 8000878:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800087c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	899b      	ldrh	r3, [r3, #12]
 8000882:	031b      	lsls	r3, r3, #12
 8000884:	b29a      	uxth	r2, r3
 8000886:	897b      	ldrh	r3, [r7, #10]
 8000888:	4313      	orrs	r3, r2
 800088a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	885b      	ldrh	r3, [r3, #2]
 8000890:	031b      	lsls	r3, r3, #12
 8000892:	b29a      	uxth	r2, r3
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	4313      	orrs	r3, r2
 8000898:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <TIM_OC4Init+0xc8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d003      	beq.n	80008aa <TIM_OC4Init+0x8a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <TIM_OC4Init+0xcc>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10a      	bne.n	80008c0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008b0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	8a1b      	ldrh	r3, [r3, #16]
 80008b6:	019b      	lsls	r3, r3, #6
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	4313      	orrs	r3, r2
 80008be:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	89fa      	ldrh	r2, [r7, #14]
 80008c4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	89ba      	ldrh	r2, [r7, #12]
 80008ca:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	897a      	ldrh	r2, [r7, #10]
 80008d8:	841a      	strh	r2, [r3, #32]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40010000 	.word	0x40010000
 80008ec:	40010400 	.word	0x40010400

080008f0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00c      	beq.n	800091c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000908:	b29b      	uxth	r3, r3
 800090a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800090e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 800091a:	e009      	b.n	8000930 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000922:	b29b      	uxth	r3, r3
 8000924:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000928:	b29a      	uxth	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DcMotor_Init>:
static void DcMotor_Backward(char speed);
static void DcMotor_right(char speed);
static void DcMotor_left(char speed);

void DcMotor_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	TIM2_PWM_Init_Pins();
 8000940:	f000 f9e0 	bl	8000d04 <TIM2_PWM_Init_Pins>


}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <DcMotor_Move_MainDirection>:

void DcMotor_Move_MainDirection(DcMotor_MainDirection state , char speed )
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	460a      	mov	r2, r1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d823      	bhi.n	80009a6 <DcMotor_Move_MainDirection+0x5e>
 800095e:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <DcMotor_Move_MainDirection+0x1c>)
 8000960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000964:	08000979 	.word	0x08000979
 8000968:	0800097f 	.word	0x0800097f
 800096c:	08000989 	.word	0x08000989
 8000970:	08000993 	.word	0x08000993
 8000974:	0800099d 	.word	0x0800099d
	{
	case stop:
		DcMotor_stop( );
 8000978:	f000 f81a 	bl	80009b0 <DcMotor_stop>
		break;
 800097c:	e014      	b.n	80009a8 <DcMotor_Move_MainDirection+0x60>
	case forward:
		DcMotor_Forward( speed);
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f825 	bl	80009d0 <DcMotor_Forward>
		break;
 8000986:	e00f      	b.n	80009a8 <DcMotor_Move_MainDirection+0x60>
	case backword :
		DcMotor_Backward( speed);
 8000988:	79bb      	ldrb	r3, [r7, #6]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f837 	bl	80009fe <DcMotor_Backward>
		break;
 8000990:	e00a      	b.n	80009a8 <DcMotor_Move_MainDirection+0x60>
	case right :

		DcMotor_right( speed);
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f849 	bl	8000a2c <DcMotor_right>
		break ;
 800099a:	e005      	b.n	80009a8 <DcMotor_Move_MainDirection+0x60>
	case left:
		DcMotor_left( speed);
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f85b 	bl	8000a5a <DcMotor_left>
		break;
 80009a4:	e000      	b.n	80009a8 <DcMotor_Move_MainDirection+0x60>
	default:
		break;
 80009a6:	bf00      	nop
	}

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DcMotor_stop>:
static void DcMotor_stop(void )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	TIM2_PWM_Channel_1_Init(0);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f871 	bl	8000a9c <TIM2_PWM_Channel_1_Init>
		TIM2_PWM_Channel_2_Init(0);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f8bb 	bl	8000b36 <TIM2_PWM_Channel_2_Init>
		TIM2_PWM_Channel_3_Init(0);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 f905 	bl	8000bd0 <TIM2_PWM_Channel_3_Init>
		TIM2_PWM_Channel_4_Init(0);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 f94f 	bl	8000c6a <TIM2_PWM_Channel_4_Init>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <DcMotor_Forward>:

static void DcMotor_Forward(char speed)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	TIM2_PWM_Channel_1_Init(speed);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f85d 	bl	8000a9c <TIM2_PWM_Channel_1_Init>
	TIM2_PWM_Channel_2_Init(0);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f8a7 	bl	8000b36 <TIM2_PWM_Channel_2_Init>
	TIM2_PWM_Channel_3_Init(speed);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f8f0 	bl	8000bd0 <TIM2_PWM_Channel_3_Init>
	TIM2_PWM_Channel_4_Init(0);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 f93a 	bl	8000c6a <TIM2_PWM_Channel_4_Init>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <DcMotor_Backward>:
static void DcMotor_Backward(char speed)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	TIM2_PWM_Channel_1_Init(0);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f847 	bl	8000a9c <TIM2_PWM_Channel_1_Init>
	TIM2_PWM_Channel_2_Init(speed);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f890 	bl	8000b36 <TIM2_PWM_Channel_2_Init>
	TIM2_PWM_Channel_3_Init(0);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f8da 	bl	8000bd0 <TIM2_PWM_Channel_3_Init>
	TIM2_PWM_Channel_4_Init(speed);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f923 	bl	8000c6a <TIM2_PWM_Channel_4_Init>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <DcMotor_right>:
static void DcMotor_right(char speed)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	TIM2_PWM_Channel_1_Init(0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f830 	bl	8000a9c <TIM2_PWM_Channel_1_Init>
	TIM2_PWM_Channel_2_Init(speed);
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f879 	bl	8000b36 <TIM2_PWM_Channel_2_Init>
	TIM2_PWM_Channel_3_Init(speed);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f8c2 	bl	8000bd0 <TIM2_PWM_Channel_3_Init>
	TIM2_PWM_Channel_4_Init(0);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f90c 	bl	8000c6a <TIM2_PWM_Channel_4_Init>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <DcMotor_left>:
static void DcMotor_left(char speed)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
	TIM2_PWM_Channel_1_Init(speed);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f818 	bl	8000a9c <TIM2_PWM_Channel_1_Init>
	TIM2_PWM_Channel_2_Init(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 f862 	bl	8000b36 <TIM2_PWM_Channel_2_Init>
	TIM2_PWM_Channel_3_Init(0);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f8ac 	bl	8000bd0 <TIM2_PWM_Channel_3_Init>
	TIM2_PWM_Channel_4_Init(speed);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f8f5 	bl	8000c6a <TIM2_PWM_Channel_4_Init>

}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <main>:
    };
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}

void main (void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

 DcMotor_Init();
 8000a8c:	f7ff ff56 	bl	800093c <DcMotor_Init>

DcMotor_Move_MainDirection(stop, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ff58 	bl	8000948 <DcMotor_Move_MainDirection>


}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <TIM2_PWM_Channel_1_Init>:

#include "pwm.h"

void TIM2_PWM_Channel_1_Init(uint8_t dutyCyclePercent) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    // Ensure dutyCyclePercent is within bounds
    dutyCyclePercent = (dutyCyclePercent > 100) ? 100 : dutyCyclePercent;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b64      	cmp	r3, #100	; 0x64
 8000aaa:	bf28      	it	cs
 8000aac:	2364      	movcs	r3, #100	; 0x64
 8000aae:	71fb      	strb	r3, [r7, #7]

    // Convert duty cycle percentage to pulse width value
    uint16_t pulseWidth = (dutyCyclePercent * 200) - 1; // Scale to a 0-20000 range
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	461a      	mov	r2, r3
 8000abc:	0091      	lsls	r1, r2, #2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	85fb      	strh	r3, [r7, #46]	; 0x2e


    // Initialize the TIM2 structure
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	2353      	movs	r3, #83	; 0x53
 8000ada:	843b      	strh	r3, [r7, #32]
 8000adc:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
        .TIM_Period = 19999,                  // Set the PWM period for 50 Hz
        .TIM_Prescaler = 83,                  // Adjusted for a 1 MHz clock
        .TIM_ClockDivision = 0,               // No clock division
        .TIM_CounterMode = TIM_CounterMode_Up // Upcounting mode
    };
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aec:	f7ff fc84 	bl	80003f8 <TIM_TimeBaseInit>

    // Configure the PWM mode
    TIM_OCInitTypeDef TIM_OCInitStructure = {
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	81bb      	strh	r3, [r7, #12]
 8000b04:	2301      	movs	r3, #1
 8000b06:	81fb      	strh	r3, [r7, #14]
 8000b08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b0a:	617b      	str	r3, [r7, #20]
        .TIM_OCMode = TIM_OCMode_PWM1,
        .TIM_OutputState = TIM_OutputState_Enable,
        .TIM_Pulse = pulseWidth,             // Set the pulse width
        .TIM_OCPolarity = TIM_OCPolarity_High
    };
    TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b16:	f7ff fcfb 	bl	8000510 <TIM_OC1Init>

    // Enable the TIM2 counter
    TIM_Cmd(TIM2, ENABLE);
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b20:	f7ff fcd6 	bl	80004d0 <TIM_Cmd>

    // Enable the TIM2 main output
    TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000b24:	2101      	movs	r1, #1
 8000b26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b2a:	f7ff fee1 	bl	80008f0 <TIM_CtrlPWMOutputs>
}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <TIM2_PWM_Channel_2_Init>:
void TIM2_PWM_Channel_2_Init(uint8_t dutyCyclePercent) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b08c      	sub	sp, #48	; 0x30
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
    // Ensure dutyCyclePercent is within bounds
    dutyCyclePercent = (dutyCyclePercent > 100) ? 100 : dutyCyclePercent;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b64      	cmp	r3, #100	; 0x64
 8000b44:	bf28      	it	cs
 8000b46:	2364      	movcs	r3, #100	; 0x64
 8000b48:	71fb      	strb	r3, [r7, #7]

    // Convert duty cycle percentage to pulse width value
    uint16_t pulseWidth = (dutyCyclePercent * 200) - 1; // Scale to a 0-20000 range
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	0091      	lsls	r1, r2, #2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	3b01      	subs	r3, #1
 8000b64:	85fb      	strh	r3, [r7, #46]	; 0x2e


    // Initialize the TIM2 structure
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	2353      	movs	r3, #83	; 0x53
 8000b74:	843b      	strh	r3, [r7, #32]
 8000b76:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
        .TIM_Period = 19999,                  // Set the PWM period for 50 Hz
        .TIM_Prescaler = 83,                  // Adjusted for a 1 MHz clock
        .TIM_ClockDivision = 0,               // No clock division
        .TIM_CounterMode = TIM_CounterMode_Up // Upcounting mode
    };
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b86:	f7ff fc37 	bl	80003f8 <TIM_TimeBaseInit>

    // Configure Channel 2 in PWM mode
    TIM_OCInitTypeDef TIM_OCInitStructure_CH2 = {
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	2360      	movs	r3, #96	; 0x60
 8000b9c:	81bb      	strh	r3, [r7, #12]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	81fb      	strh	r3, [r7, #14]
 8000ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ba4:	617b      	str	r3, [r7, #20]
        .TIM_OCMode = TIM_OCMode_PWM1,
        .TIM_OutputState = TIM_OutputState_Enable,
        .TIM_Pulse = pulseWidth,             // Set the pulse width
        .TIM_OCPolarity = TIM_OCPolarity_High
    };
    TIM_OC2Init(TIM2, &TIM_OCInitStructure_CH2);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bb0:	f7ff fd28 	bl	8000604 <TIM_OC2Init>

    // Enable the TIM2 counter
    TIM_Cmd(TIM2, ENABLE);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bba:	f7ff fc89 	bl	80004d0 <TIM_Cmd>

    // Enable the TIM2 main output
    TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bc4:	f7ff fe94 	bl	80008f0 <TIM_CtrlPWMOutputs>
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <TIM2_PWM_Channel_3_Init>:

void TIM2_PWM_Channel_3_Init(uint8_t dutyCyclePercent) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
    // Ensure dutyCyclePercent is within bounds
    dutyCyclePercent = (dutyCyclePercent > 100) ? 100 : dutyCyclePercent;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b64      	cmp	r3, #100	; 0x64
 8000bde:	bf28      	it	cs
 8000be0:	2364      	movcs	r3, #100	; 0x64
 8000be2:	71fb      	strb	r3, [r7, #7]

    // Convert duty cycle percentage to pulse width value
    uint16_t pulseWidth = (dutyCyclePercent * 200) - 1; // Scale to a 0-20000 range
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	0091      	lsls	r1, r2, #2
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Initialize the TIM2 structure
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	2353      	movs	r3, #83	; 0x53
 8000c0e:	843b      	strh	r3, [r7, #32]
 8000c10:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
        .TIM_Period = 19999,                  // Set the PWM period for 50 Hz
        .TIM_Prescaler = 83,                  // Adjusted for a 1 MHz clock
        .TIM_ClockDivision = 0,               // No clock division
        .TIM_CounterMode = TIM_CounterMode_Up // Upcounting mode
    };
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c20:	f7ff fbea 	bl	80003f8 <TIM_TimeBaseInit>

    // Configure Channel 3 in PWM mode
    TIM_OCInitTypeDef TIM_OCInitStructure_CH3 = {
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	2360      	movs	r3, #96	; 0x60
 8000c36:	81bb      	strh	r3, [r7, #12]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	81fb      	strh	r3, [r7, #14]
 8000c3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c3e:	617b      	str	r3, [r7, #20]
        .TIM_OCMode = TIM_OCMode_PWM1,
        .TIM_OutputState = TIM_OutputState_Enable,
        .TIM_Pulse = pulseWidth,             // Set the pulse width
        .TIM_OCPolarity = TIM_OCPolarity_High
    };
    TIM_OC3Init(TIM2, &TIM_OCInitStructure_CH3);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c4a:	f7ff fd63 	bl	8000714 <TIM_OC3Init>

    // Enable the TIM2 counter
    TIM_Cmd(TIM2, ENABLE);
 8000c4e:	2101      	movs	r1, #1
 8000c50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c54:	f7ff fc3c 	bl	80004d0 <TIM_Cmd>

    // Enable the TIM2 main output
    TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c5e:	f7ff fe47 	bl	80008f0 <TIM_CtrlPWMOutputs>
}
 8000c62:	bf00      	nop
 8000c64:	3730      	adds	r7, #48	; 0x30
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <TIM2_PWM_Channel_4_Init>:

void TIM2_PWM_Channel_4_Init(uint8_t dutyCyclePercent) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b08c      	sub	sp, #48	; 0x30
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
    // Ensure dutyCyclePercent is within bounds
    dutyCyclePercent = (dutyCyclePercent > 100) ? 100 : dutyCyclePercent;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b64      	cmp	r3, #100	; 0x64
 8000c78:	bf28      	it	cs
 8000c7a:	2364      	movcs	r3, #100	; 0x64
 8000c7c:	71fb      	strb	r3, [r7, #7]

    // Convert duty cycle percentage to pulse width value
    uint16_t pulseWidth = (dutyCyclePercent * 200) - 1; // Scale to a 0-20000 range
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	0091      	lsls	r1, r2, #2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3b01      	subs	r3, #1
 8000c98:	85fb      	strh	r3, [r7, #46]	; 0x2e


    // Initialize the TIM2 structure
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure = {
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	2353      	movs	r3, #83	; 0x53
 8000ca8:	843b      	strh	r3, [r7, #32]
 8000caa:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
        .TIM_Period = 19999,                  // Set the PWM period for 50 Hz
        .TIM_Prescaler = 83,                  // Adjusted for a 1 MHz clock
        .TIM_ClockDivision = 0,               // No clock division
        .TIM_CounterMode = TIM_CounterMode_Up // Upcounting mode
    };
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cba:	f7ff fb9d 	bl	80003f8 <TIM_TimeBaseInit>

    // Configure Channel 4 in PWM mode
    TIM_OCInitTypeDef TIM_OCInitStructure_CH4 = {
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	81bb      	strh	r3, [r7, #12]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	81fb      	strh	r3, [r7, #14]
 8000cd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cd8:	617b      	str	r3, [r7, #20]
        .TIM_OCMode = TIM_OCMode_PWM1,
        .TIM_OutputState = TIM_OutputState_Enable,
        .TIM_Pulse = pulseWidth,             // Set the pulse width
        .TIM_OCPolarity = TIM_OCPolarity_High
    };
    TIM_OC4Init(TIM2, &TIM_OCInitStructure_CH4);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ce4:	f7ff fd9c 	bl	8000820 <TIM_OC4Init>

    // Enable the TIM2 counter
    TIM_Cmd(TIM2, ENABLE);
 8000ce8:	2101      	movs	r1, #1
 8000cea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cee:	f7ff fbef 	bl	80004d0 <TIM_Cmd>

    // Enable the TIM2 main output
    TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cf8:	f7ff fdfa 	bl	80008f0 <TIM_CtrlPWMOutputs>
}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <TIM2_PWM_Init_Pins>:

void TIM2_PWM_Init_Pins(void )
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	// Enable the TIM2 peripheral clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff fb53 	bl	80003b8 <RCC_APB1PeriphClockCmd>

		// Enable the PWM_PORT peripheral clock
		RCC_AHB1PeriphClockCmd(PWM_RCC, ENABLE);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fb2f 	bl	8000378 <RCC_AHB1PeriphClockCmd>

		// Configure PA0 (TIM2_CH1),PA1 (TIM2_CH2), PA2 (TIM2_CH3), and PA3 (TIM2_CH4) as alternate function push-pull
		GPIO_InitTypeDef GPIO_InitStructure = {
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <TIM2_PWM_Init_Pins+0x5c>)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d22:	e883 0003 	stmia.w	r3, {r0, r1}
				.GPIO_Mode = GPIO_Mode_AF,
				.GPIO_Speed = GPIO_Speed_100MHz,
				.GPIO_OType = GPIO_OType_PP,
				.GPIO_PuPd = GPIO_PuPd_NOPULL
		};
		GPIO_Init(PWM_PORT, &GPIO_InitStructure);
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <TIM2_PWM_Init_Pins+0x60>)
 8000d2c:	f7ff fa4c 	bl	80001c8 <GPIO_Init>

		// Connect TIM2 CH1,TIM2 CH2, CH3, and CH4 pins to AF
		GPIO_PinAFConfig(PWM_PORT, GPIO_PinSource0, GPIO_AF_TIM2);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2100      	movs	r1, #0
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <TIM2_PWM_Init_Pins+0x60>)
 8000d36:	f7ff fad5 	bl	80002e4 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(PWM_PORT, GPIO_PinSource1, GPIO_AF_TIM2);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <TIM2_PWM_Init_Pins+0x60>)
 8000d40:	f7ff fad0 	bl	80002e4 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(PWM_PORT, GPIO_PinSource2, GPIO_AF_TIM2);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2102      	movs	r1, #2
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <TIM2_PWM_Init_Pins+0x60>)
 8000d4a:	f7ff facb 	bl	80002e4 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(PWM_PORT, GPIO_PinSource3, GPIO_AF_TIM2);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <TIM2_PWM_Init_Pins+0x60>)
 8000d54:	f7ff fac6 	bl	80002e4 <GPIO_PinAFConfig>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08000fdc 	.word	0x08000fdc
 8000d64:	40020000 	.word	0x40020000

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
  ldr  r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d92:	f000 f841 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f000 f8f1 	bl	8000f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fe75 	bl	8000a88 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000da4:	08000fec 	.word	0x08000fec
  ldr  r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dac:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000db0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000db4:	2000001c 	.word	0x2000001c

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>

08000dba <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <HardFault_Handler+0x4>

08000dce <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <MemManage_Handler+0x4>

08000dd4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <BusFault_Handler+0x4>

08000dda <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <SystemInit+0x60>)
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <SystemInit+0x60>)
 8000e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <SystemInit+0x64>)
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <SystemInit+0x64>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <SystemInit+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <SystemInit+0x64>)
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <SystemInit+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <SystemInit+0x64>)
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <SystemInit+0x68>)
 8000e52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <SystemInit+0x64>)
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <SystemInit+0x64>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000e66:	f000 f80d 	bl	8000e84 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <SystemInit+0x60>)
 8000e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e70:	609a      	str	r2, [r3, #8]
#endif
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	24003010 	.word	0x24003010

08000e84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e92:	4a36      	ldr	r2, [pc, #216]	; (8000f6c <SetSysClock+0xe8>)
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <SetSysClock+0xe8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <SetSysClock+0xe8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <SetSysClock+0x38>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000eba:	d1f0      	bne.n	8000e9e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <SetSysClock+0xe8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	e001      	b.n	8000ed2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d142      	bne.n	8000f5e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ed8:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <SetSysClock+0xe8>)
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <SetSysClock+0xe8>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <SetSysClock+0xec>)
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <SetSysClock+0xec>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <SetSysClock+0xe8>)
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <SetSysClock+0xe8>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <SetSysClock+0xe8>)
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <SetSysClock+0xe8>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f02:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <SetSysClock+0xe8>)
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <SetSysClock+0xe8>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000f0e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <SetSysClock+0xe8>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <SetSysClock+0xf0>)
 8000f14:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f16:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <SetSysClock+0xe8>)
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <SetSysClock+0xe8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f20:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f22:	bf00      	nop
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <SetSysClock+0xe8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f9      	beq.n	8000f24 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <SetSysClock+0xf4>)
 8000f32:	f240 7205 	movw	r2, #1797	; 0x705
 8000f36:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <SetSysClock+0xe8>)
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <SetSysClock+0xe8>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <SetSysClock+0xe8>)
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <SetSysClock+0xe8>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000f50:	bf00      	nop
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SetSysClock+0xe8>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d1f9      	bne.n	8000f52 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000
 8000f74:	07405419 	.word	0x07405419
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <__libc_init_array>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	4e0d      	ldr	r6, [pc, #52]	; (8000fb4 <__libc_init_array+0x38>)
 8000f80:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <__libc_init_array+0x3c>)
 8000f82:	1ba4      	subs	r4, r4, r6
 8000f84:	10a4      	asrs	r4, r4, #2
 8000f86:	2500      	movs	r5, #0
 8000f88:	42a5      	cmp	r5, r4
 8000f8a:	d109      	bne.n	8000fa0 <__libc_init_array+0x24>
 8000f8c:	4e0b      	ldr	r6, [pc, #44]	; (8000fbc <__libc_init_array+0x40>)
 8000f8e:	4c0c      	ldr	r4, [pc, #48]	; (8000fc0 <__libc_init_array+0x44>)
 8000f90:	f000 f818 	bl	8000fc4 <_init>
 8000f94:	1ba4      	subs	r4, r4, r6
 8000f96:	10a4      	asrs	r4, r4, #2
 8000f98:	2500      	movs	r5, #0
 8000f9a:	42a5      	cmp	r5, r4
 8000f9c:	d105      	bne.n	8000faa <__libc_init_array+0x2e>
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
 8000fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fa4:	4798      	blx	r3
 8000fa6:	3501      	adds	r5, #1
 8000fa8:	e7ee      	b.n	8000f88 <__libc_init_array+0xc>
 8000faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fae:	4798      	blx	r3
 8000fb0:	3501      	adds	r5, #1
 8000fb2:	e7f2      	b.n	8000f9a <__libc_init_array+0x1e>
 8000fb4:	08000fe4 	.word	0x08000fe4
 8000fb8:	08000fe4 	.word	0x08000fe4
 8000fbc:	08000fe4 	.word	0x08000fe4
 8000fc0:	08000fe8 	.word	0x08000fe8

08000fc4 <_init>:
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc6:	bf00      	nop
 8000fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fca:	bc08      	pop	{r3}
 8000fcc:	469e      	mov	lr, r3
 8000fce:	4770      	bx	lr

08000fd0 <_fini>:
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	bf00      	nop
 8000fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd6:	bc08      	pop	{r3}
 8000fd8:	469e      	mov	lr, r3
 8000fda:	4770      	bx	lr
